<?php

declare(strict_types=1);

/*
 * MichelinDevPetstore
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MichelinDevPetstoreLib\Models;

use Core\Utils\XmlDeserializer;
use Core\Utils\XmlSerializer;
use stdClass;

class ApiResponse implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $code;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string|null
     */
    private $message;

    /**
     * Returns Code.
     */
    public function getCode(): ?int
    {
        return $this->code;
    }

    /**
     * Sets Code.
     *
     * @maps code
     */
    public function setCode(?int $code): void
    {
        $this->code = $code;
    }

    /**
     * Returns Type.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Message.
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * Sets Message.
     *
     * @maps message
     */
    public function setMessage(?string $message): void
    {
        $this->message = $message;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->code)) {
            $json['code']    = $this->code;
        }
        if (isset($this->type)) {
            $json['type']    = $this->type;
        }
        if (isset($this->message)) {
            $json['message'] = $this->message;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }

    /**
     * Encode this object to XML
     */
    public function toXmlElement(XmlSerializer $serializer, \DOMElement $element): void
    {
        $serializer->addAsSubelement($element, 'code', $this->code);
        $serializer->addAsSubelement($element, 'type', $this->type);
        $serializer->addAsSubelement($element, 'message', $this->message);
    }

    /**
     * Create a new instance of this class from an XML Element
     */
    public static function fromXmlElement(XmlDeserializer $serializer, \DOMElement $element)
    {

        $instance = new self();

        $code = $serializer->fromElement($element, 'code', '?int');
        $instance->setCode($code);

        $type = $serializer->fromElement($element, 'type', '?string');
        $instance->setType($type);

        $message = $serializer->fromElement($element, 'message', '?string');
        $instance->setMessage($message);

        return $instance;
    }
}
