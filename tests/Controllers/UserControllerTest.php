<?php

declare(strict_types=1);

/*
 * MichelinDevPetstore
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MichelinDevPetstoreLib\Tests\Controllers;

use MichelinDevPetstoreLib\Controllers\UserController;
use MichelinDevPetstoreLib\Exceptions;

class UserControllerTest extends BaseTestController
{
    /**
     * @var UserController UserController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getUserController();
    }

    public function testTestCreateUsersWithListInput()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createUsersWithListInput($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/xml', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testTestCreateUsersWithListInput1()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createUsersWithListInput($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testTestLoginUser()
    {
        // Parameters for the API call
        $username = null;
        $password = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->loginUser($username, $password);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['X-Rate-Limit'] = ["", false];
        $headers['X-Expires-After'] = ["", false];
        $headers['Content-Type'] = ['application/xml', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testTestLoginUser1()
    {
        // Parameters for the API call
        $username = null;
        $password = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->loginUser($username, $password);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['X-Rate-Limit'] = ["", false];
        $headers['X-Expires-After'] = ["", false];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }
}
